{"version":3,"sources":["components/slider/index.tsx","components/colorpicker/index.tsx","components/timepicker/index.tsx","app.tsx","ada/index.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","marginTop","marginRight","marginLeft","SliderComponent","adaWidget","classes","useState","value","setValue","submitted","setSubmitted","submittedError","setSubmittedError","sliderComponentInputs","metaData","step","min","max","prefix","defaultValue","default_value","JSON","stringify","stepN","parseFloat","minN","maxN","defaultValueN","Button","variant","color","disabled","className","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","marks","onChange","event","newValue","onClick","v","sendUserData","type","error","getColorImage","canvas","document","createElement","ctx","getContext","width","height","rect","fillStyle","fill","toDataURL","ColorPickerComponent","CircularProgress","colorPickerComponentInputs","hex","image","style","getDate","time","split","hours","minutes","date","Date","setHours","parseInt","setMinutes","TimePickerComponent","timePickerComponentInputs","utils","DateFnsUtils","TimePicker","autoOk","label","getHours","getMinutes","getTime","App","widgetSDK","setWidgetSDK","useEffect","AdaWidgetSDK","init","widgetIsActive","e","useAdaWidget","Component","component","ColorPicker","getComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e09ca4d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport AdaWidgetSDK from '@ada-support/ada-widget-sdk';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: 40,\r\n    marginRight: 20,\r\n    marginLeft: 20\r\n  },\r\n});\r\n\r\ninterface SliderComponentInputs {\r\n  step: string,\r\n  min: string,\r\n  max: string,\r\n  /**\r\n   * Apparently ada changes defaultValue param to default_value ¯\\_(ツ)_/¯\r\n   */\r\n  default_value: string,\r\n  /**\r\n   * Future proofing the unexpected behaviour\r\n   */\r\n  defaultValue: string\r\n\r\n  /**\r\n   * Prefix for the number\r\n   */\r\n  prefix?: string\r\n}\r\n\r\n/**\r\n * Slider component to use in ada.\r\n */\r\nconst SliderComponent = ({ adaWidget }: { adaWidget: AdaWidgetSDK }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(void 0)\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [submittedError, setSubmittedError] = useState('');\r\n\r\n  const sliderComponentInputs = adaWidget.metaData as unknown as SliderComponentInputs;\r\n  const {\r\n    step,\r\n    min,\r\n    max,\r\n    prefix\r\n  } = sliderComponentInputs;\r\n  const defaultValue = sliderComponentInputs.default_value || sliderComponentInputs.defaultValue;\r\n\r\n  if (!(step && min && max && defaultValue)) {\r\n    return <div>\r\n      {JSON.stringify(sliderComponentInputs)}\r\n      Widget misconfigured. You need to pass step, min, max, defaultValue inputs.\r\n    </div>\r\n  }\r\n\r\n  const stepN = parseFloat(step);\r\n  const minN = parseFloat(min);\r\n  const maxN = parseFloat(max);\r\n  const defaultValueN = parseFloat(defaultValue);\r\n\r\n  if (submitted) {\r\n    return <Button variant=\"outlined\" color=\"primary\" disabled={true}>\r\n      Submitted {value === void 0 ? defaultValueN : value}{prefix || ''}\r\n    </Button>\r\n  }\r\n\r\n  if (submittedError) {\r\n    return <div>\r\n      {submittedError}\r\n    </div>\r\n  }\r\n\r\n  const valueText = (value: number) => {\r\n    return `${value}${prefix || ''}`;\r\n  }\r\n\r\n  const onChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as any)\r\n  }\r\n\r\n  const hanldeSubmit = () => {\r\n    const v = value === void 0 ? defaultValueN : value;\r\n    adaWidget.sendUserData({\r\n      value: v\r\n    }, (event) => {\r\n      if (event.type === 'SEND_USER_DATA_SUCCESS') {\r\n        setSubmitted(true);\r\n      } else {\r\n        setSubmittedError(event.error);\r\n      }\r\n    });\r\n  }\r\n\r\n  return <div className={classes.root}>\r\n    <Slider\r\n      defaultValue={defaultValueN}\r\n      getAriaValueText={valueText}\r\n      aria-labelledby=\"discrete-slider\"\r\n      valueLabelDisplay=\"auto\"\r\n      step={stepN}\r\n      marks={true}\r\n      min={minN}\r\n      max={maxN}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n    <Button onClick={hanldeSubmit} variant=\"outlined\" color=\"primary\">\r\n      Submit {value === void 0 ? defaultValueN : value}{prefix || ''}\r\n    </Button>\r\n  </div>;\r\n}\r\n\r\nexport default SliderComponent;","import React, { useState } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TwitterPicker, ColorResult } from 'react-color';\r\nimport Button from '@material-ui/core/Button';\r\nimport AdaWidgetSDK from '@ada-support/ada-widget-sdk';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n  },\r\n});\r\n\r\ninterface ColorPickerComponentInputs {\r\n  /**\r\n   * Color in hex format.\r\n   */\r\n  color: string\r\n}\r\n\r\nconst getColorImage = (color: string) => {\r\n  const canvas = document.createElement('canvas');\r\n  const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n\r\n  canvas.width = 100;\r\n  canvas.height = 100;\r\n\r\n  ctx.rect(0, 0, 100, 100);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n  return canvas.toDataURL();\r\n}\r\n\r\n\r\n/**\r\n * ColorPicker component to use in ada.\r\n */\r\nconst ColorPickerComponent = ({ adaWidget }: { adaWidget: AdaWidgetSDK }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState<string | undefined>();\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [submittedError, setSubmittedError] = useState('');\r\n\r\n  if (!adaWidget) {\r\n    return <CircularProgress />\r\n  }\r\n\r\n  const colorPickerComponentInputs = adaWidget.metaData as unknown as ColorPickerComponentInputs;\r\n  const {\r\n    color\r\n  } = colorPickerComponentInputs;\r\n  const v = value || color;\r\n\r\n  if (!color) {\r\n    return <div>\r\n      {JSON.stringify(colorPickerComponentInputs)}\r\n      Widget misconfigured. You need to pass color input.\r\n    </div>\r\n  }\r\n\r\n  if (submitted) {\r\n    return <Button variant=\"outlined\" color=\"primary\" disabled={true}>\r\n      Submitted {v}\r\n    </Button>\r\n  }\r\n\r\n  if (submittedError) {\r\n    return <div>\r\n      {submittedError}\r\n    </div>\r\n  }\r\n\r\n  const onChange = (color: ColorResult) => {\r\n    setValue(color.hex);\r\n  }\r\n\r\n  const hanldeSubmit = () => {\r\n    adaWidget.sendUserData({\r\n      value: v,\r\n      image: getColorImage(v)\r\n    }, (event) => {\r\n      if (event.type === 'SEND_USER_DATA_SUCCESS') {\r\n        setSubmitted(true);\r\n      } else {\r\n        setSubmittedError(event.error);\r\n      }\r\n    });\r\n  }\r\n\r\n  return <div className={classes.root}>\r\n    <TwitterPicker color={v} onChange={onChange} />\r\n    <Button onClick={hanldeSubmit} variant=\"outlined\" color=\"primary\" style={{ color: v }}>\r\n      Submit {v}\r\n    </Button>\r\n  </div>;\r\n}\r\n\r\nexport default ColorPickerComponent;","import React, { useState } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport Button from '@material-ui/core/Button';\r\nimport AdaWidgetSDK from '@ada-support/ada-widget-sdk';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n  },\r\n});\r\n\r\ninterface TimePickerComponentInputs {\r\n  /**\r\n   * time in hh:mm format\r\n   */\r\n  time: string\r\n}\r\n\r\nconst getDate = (time: string) => {\r\n  const [hours, minutes] = time.split(\":\");\r\n\r\n  const date = new Date();\r\n  date.setHours(parseInt(hours));\r\n  date.setMinutes(parseInt(minutes))\r\n  return date;\r\n}\r\n\r\nconst getTime = (date: Date) => {\r\n  return `${date.getHours()}:${date.getMinutes()}`\r\n}\r\n\r\n/**\r\n * TimePicker component to use in ada.\r\n */\r\nconst TimePickerComponent = ({ adaWidget }: { adaWidget: AdaWidgetSDK }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState<string | undefined>();\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [submittedError, setSubmittedError] = useState('');\r\n\r\n  if (!adaWidget) {\r\n    return <CircularProgress />\r\n  }\r\n\r\n  const timePickerComponentInputs = adaWidget.metaData as unknown as TimePickerComponentInputs;\r\n  const {\r\n    time\r\n  } = timePickerComponentInputs;\r\n  const v = value || time;\r\n\r\n  if (!time) {\r\n    return <div>\r\n      {JSON.stringify(timePickerComponentInputs)}\r\n      Widget misconfigured. You need to pass time input.\r\n    </div>\r\n  }\r\n\r\n  if (submitted) {\r\n    return <Button variant=\"outlined\" color=\"primary\" disabled={true}>\r\n      Submitted {v}\r\n    </Button>\r\n  }\r\n\r\n  if (submittedError) {\r\n    return <div>\r\n      {submittedError}\r\n    </div>\r\n  }\r\n\r\n  const onChange = (date: Date | null) => {\r\n    if (!date) {\r\n      return;\r\n    }\r\n    setValue(getTime(date));\r\n  }\r\n\r\n  const hanldeSubmit = () => {\r\n    adaWidget.sendUserData({\r\n      value: v,\r\n    }, (event) => {\r\n      if (event.type === 'SEND_USER_DATA_SUCCESS') {\r\n        setSubmitted(true);\r\n      } else {\r\n        setSubmittedError(event.error);\r\n      }\r\n    });\r\n  }\r\n\r\n  return <div className={classes.root}>\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <TimePicker autoOk label=\"24 hours\" value={getDate(v)} onChange={onChange} />\r\n      <Button onClick={hanldeSubmit} variant=\"outlined\" color=\"primary\" style={{ color: v }}>\r\n        Submit {v}\r\n      </Button>\r\n    </MuiPickersUtilsProvider>\r\n  </div>;\r\n}\r\n\r\nexport default TimePickerComponent;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Slider from './components/slider';\nimport ColorPicker from './components/colorpicker';\nimport TimePicker from './components/timepicker';\n\nimport { useAdaWidget } from './ada';\n\nconst SLIDER = 'slider' as 'slider';\nconst TIMEPICKER = 'timepicker' as 'timepicker';\nconst COLORPICKER = 'colorpicker' as 'colorpicker';\n\ninterface ComponentSelectorInputs {\n  component: typeof SLIDER | typeof TIMEPICKER | typeof COLORPICKER\n}\n\nconst getComponent = (component: string) => {\n  if (component === SLIDER) {\n    return Slider;\n  }\n  if (component === COLORPICKER) {\n    return ColorPicker;\n  }\n  if (component === TIMEPICKER) {\n    return TimePicker;\n  }\n  return null\n}\n\nfunction App() {\n  const adaWidget = useAdaWidget();\n\n  if (!adaWidget) {\n    return <CircularProgress />\n  }\n\n  const { component } = adaWidget.metaData as unknown as ComponentSelectorInputs;\n  const Component = getComponent(component);\n\n  if (!Component) {\n    return <div>\n      Widget misconfigured. Make sure that \"component\" input is passed and \n      it's value is one of the : \"{SLIDER}\", \"{COLORPICKER}\", \"{TIMEPICKER}\"\n    </div>;\n  }\n\n  return (\n    <div>\n      <Component adaWidget={adaWidget}></Component>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\nimport AdaWidgetSDK from \"@ada-support/ada-widget-sdk\";\r\n\r\n/**\r\n * Custome react hook to use inside of the react component to initalize \r\n * the widget and get the AdaWidget as a state.\r\n */\r\nexport const useAdaWidget = () => {\r\n    const [widgetSDK, setWidgetSDK] = useState(null as AdaWidgetSDK | null);\r\n    useEffect(() => {\r\n        const widgetSDK = new AdaWidgetSDK();\r\n\r\n        /**\r\n         * Try catch the init to give a way to develop locally without using the ada ui.\r\n         */\r\n        try {\r\n            widgetSDK.init((event) => {\r\n                if (!widgetSDK.widgetIsActive) {\r\n                    return;\r\n                }\r\n\r\n                setWidgetSDK(widgetSDK);\r\n            });\r\n        } catch (e) {\r\n            // ignored\r\n        }\r\n    });\r\n\r\n    return widgetSDK;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}